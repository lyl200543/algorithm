package necessary.class031;

/**
 *ClassName: class031_6_leetcode_461
 *Package: necessary.class031
 *Description:创建于 2025/9/23 20:05
 * 两个整数之间的 汉明距离 指的是这两个数字对应二进制位不同的位置的数目。
 * 给你两个整数 x 和 y，计算并返回它们之间的汉明距离。
 *
 * 计算二进制中1的个数
 * 思路：以11110100为例
 * 11110100 & 01010101 -> 01010100
 * 11110100 >>>1  01111010 & 01010101 -> 01010000
 * 01010100+01010000 -> 10100100
 * 以2为一组 10表示11（2个1） 01表示01（1个1）
 * 以此类推
 *
 * 第一步：按 1 位分组，计算每组 1 的个数
 * 用01010101（0x55）掩码提取奇数位：11110100 & 01010101 = 01010100
 * 原数右移 1 位后，用同样 01010101掩码提取偶数位：01111010 & 01010101 = 01010000`
 * 两数相加：01010100 + 01010000 = 10100100
 * 结果：10100100（每两位表示对应位置 1 的个数，如10表示 2 个 1，01表示 1 个 1）
 * 第二步：按 2 位分组，合并相邻组的计数
 * 用00110011（0x33）掩码提取当前值的低 2 位和高 2 位：10100100 & 00110011 = 00100000
 * 当前值右移 2 位后，用00110011掩码提取：00101001 & 00110011 = 00100001
 * 两数相加：00100000 + 00100001 = 01000001
 * 结果：01000001（每 4 位表示对应 2 位中 1 的总数）
 *@Author lyl
 *@Version 1.0
 */
public class class031_6_leetcode_461 {
}
class Solution18 {
    public int hammingDistance(int x, int y) {
        return hamming(x^y);
    }

    //计算二进制中1的个数
    private int hamming (int n) {
        n=(n & 0x55555555) + ((n >>> 1) & 0x55555555);
        n=(n & 0x33333333) + ((n >>> 2) & 0x33333333);
        n=(n & 0x0f0f0f0f) + ((n >>> 4) & 0x0f0f0f0f);
        n=(n & 0x00ff00ff) + ((n >>> 8) & 0x00ff00ff);
        n=(n & 0x0000ffff) + ((n >>> 16) & 0x0000ffff);
        return n;
    }
}